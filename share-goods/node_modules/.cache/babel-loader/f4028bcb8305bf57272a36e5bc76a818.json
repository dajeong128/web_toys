{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kwondajeong/www/web_toys/share-goods/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kwondajeong/www/web_toys/share-goods/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar keyReducers = {\n  \"{env}\": function env(fakerjs) {\n    return fakerjs.random.arrayElement([\"staging\"]);\n    return fakerjs.random.arrayElement([\"prod\", \"staging\"]);\n  },\n  \"{userID}\": function userID(fakerjs) {\n    return fakerjs.random.alphaNumeric(5);\n  },\n  \"{postID}\": function postID(fakerjs) {\n    return fakerjs.random.alphaNumeric(5);\n  }\n};\nvar schema = {\n  \"{env}\": {\n    users: {\n      \"{userID}\": {\n        comment_count: \"number\",\n        username: \"string\",\n        is_verified: \"boolean\",\n        created_at: \"timestamp\"\n      }\n    },\n    posts: {\n      \"{postID}\": {\n        post_title: \"string\",\n        post_data: function post_data(faker, key) {\n          // return faker.random.words(5)\n          return key.split(\"/\").join(\"-\") + \":post_data\";\n        },\n        // Can be async function !\n        vote_counts: function () {\n          var _vote_counts = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(faker, key) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return doSomethingAsync();\n\n                  case 2:\n                    result = _context.sent;\n                    return _context.abrupt(\"return\", result);\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n\n          function vote_counts(_x, _x2) {\n            return _vote_counts.apply(this, arguments);\n          }\n\n          return vote_counts;\n        }(),\n        author_id: \"{userID}\",\n        created_at: \"timestamp\"\n      }\n    },\n    comments: {\n      \"{postID}\": {\n        \"{commentID}\": {\n          value: \"üëç\",\n          userID: \"{userID}\"\n        }\n      }\n    }\n  }\n};\nvar count = 5;\nmodule.exports = {\n  schema: schema,\n  keyReducers: keyReducers,\n  count: count\n};","map":{"version":3,"sources":["/Users/kwondajeong/www/web_toys/share-goods/src/components/GoodsItems/schema.js"],"names":["keyReducers","fakerjs","random","arrayElement","alphaNumeric","schema","users","comment_count","username","is_verified","created_at","posts","post_title","post_data","faker","key","split","join","vote_counts","doSomethingAsync","result","author_id","comments","value","userID","count","module","exports"],"mappings":";;AAAA,IAAMA,WAAW,GAAG;AAChB,WAAS,aAAAC,OAAO,EAAI;AAClB,WAAOA,OAAO,CAACC,MAAR,CAAeC,YAAf,CAA4B,CAAC,SAAD,CAA5B,CAAP;AACA,WAAOF,OAAO,CAACC,MAAR,CAAeC,YAAf,CAA4B,CAAC,MAAD,EAAS,SAAT,CAA5B,CAAP;AACD,GAJe;AAKhB,cAAY,gBAAAF,OAAO,EAAI;AACrB,WAAOA,OAAO,CAACC,MAAR,CAAeE,YAAf,CAA4B,CAA5B,CAAP;AACD,GAPe;AAQhB,cAAY,gBAAAH,OAAO,EAAI;AACrB,WAAOA,OAAO,CAACC,MAAR,CAAeE,YAAf,CAA4B,CAA5B,CAAP;AACD;AAVe,CAApB;AAaE,IAAMC,MAAM,GAAG;AACb,WAAS;AACPC,IAAAA,KAAK,EAAE;AACL,kBAAY;AACVC,QAAAA,aAAa,EAAE,QADL;AAEVC,QAAAA,QAAQ,EAAE,QAFA;AAGVC,QAAAA,WAAW,EAAE,SAHH;AAIVC,QAAAA,UAAU,EAAE;AAJF;AADP,KADA;AASPC,IAAAA,KAAK,EAAE;AACL,kBAAY;AACVC,QAAAA,UAAU,EAAE,QADF;AAEVC,QAAAA,SAAS,EAAE,mBAACC,KAAD,EAAQC,GAAR,EAAgB;AACzB;AACA,iBAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,GAApB,IAA2B,YAAlC;AACD,SALS;AAMV;AACAC,QAAAA,WAAW;AAAA;AAAA;AAAA,mCAAE,iBAAOJ,KAAP,EAAcC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACUI,gBAAgB,EAD1B;;AAAA;AACLC,oBAAAA,MADK;AAAA,qDAEJA,MAFI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,WAPD;AAWVC,QAAAA,SAAS,EAAE,UAXD;AAYVX,QAAAA,UAAU,EAAE;AAZF;AADP,KATA;AAyBPY,IAAAA,QAAQ,EAAE;AACR,kBAAY;AACV,uBAAe;AACbC,UAAAA,KAAK,EAAE,IADM;AAEbC,UAAAA,MAAM,EAAE;AAFK;AADL;AADJ;AAzBH;AADI,CAAf;AAqCA,IAAMC,KAAK,GAAG,CAAd;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,MAAM,EAANA,MADe;AAEfL,EAAAA,WAAW,EAAXA,WAFe;AAGfyB,EAAAA,KAAK,EAALA;AAHe,CAAjB","sourcesContent":["const keyReducers = {\n    \"{env}\": fakerjs => {\n      return fakerjs.random.arrayElement([\"staging\"]);\n      return fakerjs.random.arrayElement([\"prod\", \"staging\"]);\n    },\n    \"{userID}\": fakerjs => {\n      return fakerjs.random.alphaNumeric(5);\n    },\n    \"{postID}\": fakerjs => {\n      return fakerjs.random.alphaNumeric(5);\n    }\n  };\n  \n  const schema = {\n    \"{env}\": {\n      users: {\n        \"{userID}\": {\n          comment_count: \"number\",\n          username: \"string\",\n          is_verified: \"boolean\",\n          created_at: \"timestamp\"\n        }\n      },\n      posts: {\n        \"{postID}\": {\n          post_title: \"string\",\n          post_data: (faker, key) => {\n            // return faker.random.words(5)\n            return key.split(\"/\").join(\"-\") + \":post_data\";\n          },\n          // Can be async function !\n          vote_counts: async (faker, key) => {\n            const result = await doSomethingAsync();\n            return result;\n          },\n          author_id: \"{userID}\",\n          created_at: \"timestamp\"\n        }\n      },\n      comments: {\n        \"{postID}\": {\n          \"{commentID}\": {\n            value: \"üëç\",\n            userID: \"{userID}\"\n          }\n        }\n      }\n    }\n  };\n  \n  const count = 5;\n  \n  module.exports = {\n    schema,\n    keyReducers,\n    count\n  };"]},"metadata":{},"sourceType":"module"}